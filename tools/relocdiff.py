import sys,os,struct
import argparse

# compares 2 binary programs assembled at 2 various locations (but exact same program)
# and extract relocation offsets
# it works if MSB or byte after MSB is different (it aligns on MSB)

parser = argparse.ArgumentParser()
parser.add_argument("-f","--first",required=True)
parser.add_argument("-s","--second",required=True)
parser.add_argument("-o","--output",required=True)
parser.add_argument("-O","--original-offset")
parser.add_argument("-R","--relocated-offset")

args = parser.parse_args()

if os.path.getsize(args.first) != os.path.getsize(args.second):
    error("first & second files don't have the same size")

data = []
for name in args.first,args.second:
    if name:
        with open(name,"rb") as f:
            data.append(f.read())

diffs = []

it = iter(enumerate(zip(*data)))

for i,(c1,c2) in it:
    if c1 != c2:
        if i%2:
            diffs.append(i-1)
        else:
            diffs.append(i)
            next(it)
        next(it)
        next(it)

if args.original_offset is not None:
    original_offset = int(args.original_offset,16)
    # filter out other diffs

    wrong = set()
    for r in diffs:
        value = struct.unpack_from(">I",data[0],r)[0]
        if original_offset < value < original_offset+0x100000:
            pass
        else:
            print("(src) Reloc on wrong offset: {:08x} offset {:08x}".format(value,r))
            wrong.add(r)

    if args.relocated_offset is not None:
        relocated_offset = int(args.relocated_offset,16)
        for r in diffs:
            value = struct.unpack_from(">I",data[1],r)[0]
            if relocated_offset < value < relocated_offset+0x100000:
                pass
            else:
                print("(dest) Reloc on wrong offset: {:08x} offset {:08x}".format(value,r))
                wrong.add(r)

    diffs = set(diffs)-wrong

with open(args.output,"w") as f:
    f.write("; generated by relocdiff.py by JOTD\n")
    f.write("; https://github.com/jotd666/amiga68ktools.git\n")
    i = 0
    for r in sorted(diffs):
        if i%8 == 0:
            if i!=0:
                f.write("\n")

            f.write("\tdc.l\t")
        else:
            f.write(",")
        i+=1
        f.write("${:08x}".format(r))
    f.write("\n\n\tdc.w\t-1\n")