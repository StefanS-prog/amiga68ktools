# -*- coding: utf-8 -*-

"""
iso2cd32
(c) MML, 2012
"""

try:
    unicode
except NameError:
    ord = lambda x:x

# Convert an ISO9660 file to an bootable CD32 ISO
#
# The ISO file is built using mkisofs (cdrtools 3.0) with those parameters:
# mkisofs -quiet -V <cd_name> -copyright <your_copyright> -publisher <publisher_name>
# -o <name.raw> -relaxed-filenames -d -input-charset ASCII -output-charset ASCII
# -iso-level 3 -A "" -sysid CDTV <folder_name>

import sys
import glob             # glob() expande los patrones de los ficheros en windows
import os               # path.basename(), path.exists()
from optparse import make_option, OptionParser

# CD32.TM file
CD32_TM = b'\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a' + \
	b'\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a' + \
	b'\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a' + \
	b'\x2a\x0a\x2a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x2a\x0a\x2a\x20\x43\x6f\x70\x79\x72\x69\x67\x68\x74\x20' + \
	b'\xa9\x20\x31\x39\x39\x33\x20\x2d\x20\x43\x6f\x6d\x6d\x6f\x64\x6f' + \
	b'\x72\x65\x20\x45\x6c\x65\x63\x74\x72\x6f\x6e\x69\x63\x73\x20\x4c' + \
	b'\x74\x64\x2e\x20\x2a\x0a\x2a\x20\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x41\x6c\x6c\x20\x72\x69\x67\x68\x74\x73\x20' + \
	b'\x72\x65\x73\x65\x72\x76\x65\x64\x2e\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x2a\x0a\x2a\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x2a\x0a\x2a\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x43\x43\x43\x43\x20\x20\x20\x20\x54\x4d\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2a\x0a\x2a\x20\x20\x20' + \
	b'\x20\x20\x43\x43\x43\x43\x43\x43\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2a\x0a\x2a\x20' + \
	b'\x20\x20\x43\x43\x43\x43\x43\x43\x43\x43\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2a\x0a' + \
	b'\x2a\x20\x20\x20\x43\x43\x43\x43\x43\x43\x20\x20\x2f\x2f\x2f\x2f' + \
	b'\x2f\x2f\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x2a\x0a\x2a\x20\x20\x43\x43\x43\x43\x43\x20\x20\x20\x20\x2f\x2f' + \
	b'\x2f\x2f\x2f\x20\x20\x20\x54\x68\x65\x20\x43\x6f\x6d\x6d\x6f\x64' + \
	b'\x6f\x72\x65\x20\x6c\x6f\x67\x6f\x20\x69\x73\x20\x61\x20\x20\x20' + \
	b'\x20\x20\x2a\x0a\x2a\x20\x20\x43\x43\x43\x43\x20\x20\x20\x20\x20' + \
	b'\x2f\x2f\x2f\x2f\x20\x20\x20\x20\x72\x65\x67\x69\x73\x74\x65\x72' + \
	b'\x65\x64\x20\x74\x72\x61\x64\x65\x6d\x61\x72\x6b\x20\x6f\x66\x20' + \
	b'\x20\x20\x20\x20\x2a\x0a\x2a\x20\x20\x43\x43\x43\x43\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x43\x6f\x6d\x6d\x6f\x64' + \
	b'\x6f\x72\x65\x20\x45\x6c\x65\x63\x74\x72\x6f\x6e\x69\x63\x73\x20' + \
	b'\x4c\x74\x64\x2e\x20\x20\x2a\x0a\x2a\x20\x20\x43\x43\x43\x43\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x69\x6e\x20\x74' + \
	b'\x68\x65\x20\x55\x2e\x53\x2e\x20\x61\x6e\x64\x20\x6d\x61\x6e\x79' + \
	b'\x20\x6f\x74\x68\x65\x72\x20\x20\x2a\x0a\x2a\x20\x20\x43\x43\x43' + \
	b'\x43\x20\x20\x20\x20\x20\x5c\x5c\x5c\x5c\x20\x20\x20\x20\x63\x6f' + \
	b'\x75\x6e\x74\x72\x69\x65\x73\x2e\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2a\x0a\x2a\x20\x20\x43' + \
	b'\x43\x43\x43\x43\x20\x20\x20\x20\x5c\x5c\x5c\x5c\x5c\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2a\x0a\x2a\x20' + \
	b'\x20\x20\x43\x43\x43\x43\x43\x43\x20\x20\x5c\x5c\x5c\x5c\x5c\x5c' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x2a\x0a' + \
	b'\x2a\x20\x20\x20\x43\x43\x43\x43\x43\x43\x43\x43\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x2a\x0a\x2a\x20\x20\x20\x20\x20\x43\x43\x43\x43\x43\x43\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x2a\x0a\x2a\x20\x20\x20\x20\x20\x20\x20\x43\x43\x43\x43' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x2a\x0a\x2a\x20\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x2a\x0a\x2a\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20' + \
	b'\x20\x20\x20\x20\x20\x20\x20\x20\x2a\x0a\x2a\x2a\x2a\x2a\x2a\x2a' + \
	b'\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a' + \
	b'\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a' + \
	b'\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x2a\x0a\x00\x00\x03\xe7' + \
	b'\x00\x00\x00\x00\x00\x00\x03\xe8\x00\x00\x00\x01\x65\x78\x65\x63' + \
	b'\x00\x00\x03\xe9\x00\x00\x00\x43\x41\xe9\x00\x14\x61\x00\x00\x00' + \
	b'\x41\xee\x01\x88\x60\x00\x00\x00\x70\x07\x22\x29\x00\x0e\x20\x41' + \
	b'\x66\x0c\x13\x7c\x00\x06\x00\x08\x4e\x75\x70\x05\x22\x08\x41\xe8' + \
	b'\x00\x14\x33\xfc\x40\x00\x00\x00\x00\x00\x52\x2e\x01\x26\x13\x40' + \
	b'\x00\x08\x58\x88\x20\x28\x00\x04\x21\x49\x00\x04\xc1\x88\x48\xd1' + \
	b'\x01\x01\x20\x89\x22\x41\x22\x29\x00\x10\x67\x16\x10\x29\x00\x0e' + \
	b'\x02\x40\x00\x03\x67\x28\x0c\x00\x00\x01\x66\x16\x22\x41\x4e\xae' + \
	b'\x00\x00\x53\x2e\x01\x26\x6c\x08\x33\xfc\xc0\x00\x00\x00\x00\x00' + \
	b'\x4e\x75\x0c\x00\x00\x02\x67\xea\x20\x41\x4e\x90\x60\xe4\x10\x29' + \
	b'\x00\x0f\x52\x2e\x01\x27\x53\x2e\x01\x26\x6c\x08\x33\xfc\xc0\x00' + \
	b'\x00\x00\x00\x00\x22\x41\x72\x00\x01\xc1\x20\x01\x4e\xae\x00\x00' + \
	b'\x60\x00\x00\x00\x41\xe8\x00\x14\x33\xfc\x40\x00\x00\x00\x00\x00' + \
	b'\x52\x2e\x01\x26\x22\x50\x20\x11\x67\x08\x20\x80\xc1\x89\x23\x48' + \
	b'\x00\x04\x53\x2e\x01\x26\x6c\x08\x33\xfc\xc0\x00\x00\x00\x00\x00' + \
	b'\x4e\x75\x22\x68\x00\x14\x4a\x91\x66\x1c\x12\x28\x00\x0f\x41\xe8' + \
	b'\x00\x14\x70\x00\x03\xc0\x2f\x0a\x24\x48\x4e\xae\x00\x00\x22\x52' + \
	b'\x4a\x91\x67\xf6\x24\x5f\x20\x20\x20\x20\x4e\x75\x41\xee\x01\x88' + \
	b'\x60\x00\x00\x00\x00\x00\x00\x00\x03\xef\x81\x00\x00\x02\x5f\x69' + \
	b'\x6e\x74\x65\x6e\x61\x00\x00\x00\x00\x05\x00\x00\x00\x2e\x00\x00' + \
	b'\x00\x74\x00\x00\x00\x98\x00\x00\x00\xb4\x00\x00\x00\xd4\x83\x00' + \
	b'\x00\x02\x5f\x4c\x56\x4f\x57\x61\x69\x74\x00\x00\x00\x01\x00\x00' + \
	b'\x00\xf4\x83\x00\x00\x03\x5f\x4c\x56\x4f\x53\x69\x67\x6e\x61\x6c' + \
	b'\x00\x00\x00\x00\x00\x01\x00\x00\x00\xa6\x83\x00\x00\x02\x4e\x65' + \
	b'\x77\x4c\x69\x73\x74\x00\x00\x00\x00\x01\x00\x00\x00\x06\x83\x00' + \
	b'\x00\x03\x5f\x4c\x56\x4f\x43\x61\x75\x73\x65\x00\x00\x00\x00\x00' + \
	b'\x00\x01\x00\x00\x00\x68\x83\x00\x00\x02\x46\x69\x6e\x64\x4e\x6f' + \
	b'\x64\x65\x00\x00\x00\x01\x00\x00\x01\x08\x83\x00\x00\x02\x50\x65' + \
	b'\x72\x6d\x69\x74\x00\x00\x00\x00\x00\x01\x00\x00\x00\xaa\x83\x00' + \
	b'\x00\x02\x41\x64\x64\x4e\x6f\x64\x65\x00\x00\x00\x00\x01\x00\x00' + \
	b'\x00\x0e\x01\x00\x00\x02\x41\x64\x64\x50\x6f\x72\x74\x00\x00\x00' + \
	b'\x00\x00\x01\x00\x00\x02\x47\x65\x74\x4d\x73\x67\x00\x00\x00\x00' + \
	b'\x00\xac\x01\x00\x00\x02\x50\x75\x74\x4d\x73\x67\x00\x00\x00\x00' + \
	b'\x00\x22\x01\x00\x00\x02\x46\x69\x6e\x64\x50\x6f\x72\x74\x00\x00' + \
	b'\x01\x02\x01\x00\x00\x02\x52\x65\x70\x6c\x79\x4d\x73\x67\x00\x00' + \
	b'\x00\x10\x01\x00\x00\x02\x57\x61\x69\x74\x50\x6f\x72\x74\x00\x00' + \
	b'\x00\xda\x00\x00\x00\x00\x00\x00\x03\xf0\x00\x00\x00\x02\x41\x64' + \
	b'\x64\x50\x6f\x72\x74\x00\x00\x00\x00\x00\x00\x00\x00\x02\x70\x6d' + \
	b'\x5f\x63\x61\x6c\x6c\x00\x00\x00\x00\x7a\x00\x00\x00\x02\x70\x6d' + \
	b'\x5f\x65\x78\x69\x74\x00\x00\x00\x00\x6a\x00\x00\x00\x03\x70\x6d' + \
	b'\x5f\x73\x69\x67\x6e\x61\x6c\x00\x00\x00\x00\x00\x00\x86\x00\x00' + \
	b'\x00\x03\x52\x45\x4d\x48\x45\x41\x44\x2e\x30\x33\x33\x00\x00\x00' + \
	b'\x00\xca\x00\x00\x00\x02\x77\x70\x5f\x77\x61\x69\x74\x00\x00\x00' + \
	b'\x00\xf2\x00\x00\x00\x02\x77\x70\x5f\x65\x78\x69\x74\x00\x00\x00' + \
	b'\x00\xfe\x00\x00\x00\x02\x47\x65\x74\x4d\x73\x67\x00\x00\x00\x00' + \
	b'\x00\xac\x00\x00\x00\x02\x50\x75\x74\x4d\x73\x67\x00\x00\x00\x00' + \
	b'\x00\x22\x00\x00\x00\x02\x46\x69\x6e\x64\x50\x6f\x72\x74\x00\x00' + \
	b'\x01\x02\x00\x00\x00\x03\x45\x4e\x41\x42\x4c\x45\x2e\x30\x33\x31' + \
	b'\x00\x00\x00\x00\x00\x78\x00\x00\x00\x03\x45\x4e\x41\x42\x4c\x45' + \
	b'\x2e\x30\x33\x32\x00\x00\x00\x00\x00\x9c\x00\x00\x00\x03\x45\x4e' + \
	b'\x41\x42\x4c\x45\x2e\x30\x33\x34\x00\x00\x00\x00\x00\xd8\x00\x00' + \
	b'\x00\x02\x50\x75\x74\x4d\x73\x67\x31\x00\x00\x00\x00\x26\x00\x00' + \
	b'\x00\x02\x52\x65\x70\x6c\x79\x4d\x73\x67\x00\x00\x00\x10\x00\x00' + \
	b'\x00\x02\x57\x61\x69\x74\x50\x6f\x72\x74\x00\x00\x00\xda\x00\x00' + \
	b'\x00\x00\x00\x00\x03\xf2\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' + \
	b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' + \
	b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' + \
	b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00' + \
	b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'

# CD32 Application Data Field
# 0x13 * 2048 = Pointer to the directory in the disk (0x9800)
# 0x12 * 2048 = Pointer to the CD32.TM file, it's embedded in 0x9000 for not
#               need to add to the disk and not need to search it :P
#                     F   S           T   M       *FS_Sector             TM_Sector*
CD32_AppDat = b'\x00\x46\x53\x00\x00\x54\x4d\x00\x13\x00\x00\x00\x00\x00\x00\x00\x12'

# Procesa la línea de comandos
def procesar_linea_comandos(linea_de_comandos):
    """
    Devuelve una tupla de dos elementos: (opciones, lista_de_ficheros).
    `linea_de_comandos` es una lista de argumentos, o `None` para ``sys.argv[1:]``.
    """
    if linea_de_comandos is None:
        linea_de_comandos = sys.argv[1:]

    version_programa = "%prog v0.1"
    uso_programa = "usage: %prog [options] file1.raw file2.raw ... fileX.raw"
    descripcion_programa = "%prog transform RAW ISO images to CD32 bootable ISOs."

    # definimos las opciones que soportaremos desde la lnea de comandos
    lista_de_opciones = []

    parser = OptionParser(usage=uso_programa, description=descripcion_programa,
        version=version_programa, option_list=lista_de_opciones)

    # obtenemos las opciones y la lista de ficheros suministradas al programa
    (opciones, lista_ficheros_tmp) = parser.parse_args(linea_de_comandos)

    # comprobamos el número de argumentos y verificamos los valores
    if (not lista_ficheros_tmp):
        parser.error("No files to process.")
    else:
        lista_ficheros = []
        for i in lista_ficheros_tmp:
            lista_ficheros = lista_ficheros + glob.glob(i)

    return opciones, lista_ficheros

# Función principal
def main(linea_de_comandos=None):
    """
    Main function
    """
    # Get commandline arguments
    opciones, lista_ficheros = procesar_linea_comandos(linea_de_comandos)

    for nombre_fichero in lista_ficheros:
        # Process files
        if not(os.path.exists(nombre_fichero)):
            print ("The file %s doesn't exist.", nombre_fichero)
            continue

        # Open file
        iso_tmp = b""
        print ("Loading file: " + nombre_fichero)
        with open(nombre_fichero,"rb") as fichero:
            iso_tmp = fichero.read()

        # Check l_path_table and m_path_table
        if (ord(iso_tmp[0x808C]) != 0x13) and (ord(iso_tmp[0x8097]) != 0x15):
            print ("Invalid ISO image: %x, %x" % (ord(iso_tmp[0x808C]),ord(iso_tmp[0x8097])))
        else:
            CD32_AppDat_tmp = iso_tmp[0x8370: 0x8373] + CD32_AppDat

            # Insert the two copies of Application Data Field and CD32.TM
            iso_tmp = iso_tmp [0: 0x8370] + CD32_AppDat_tmp + \
                        iso_tmp [0x8370 + len(CD32_AppDat_tmp): 0x8B70] + \
                        CD32_AppDat_tmp + iso_tmp [0x8B70 + len(CD32_AppDat_tmp): 0x9000] + \
                        CD32_TM + iso_tmp [0x9000 + len(CD32_TM):]

            # Save the ISO file
            print ("Saving file: " + nombre_fichero.lower().replace(".raw",".iso"))
            with open(nombre_fichero.lower().replace(".raw",".iso"),"wb") as fichero:
                fichero.write(iso_tmp)

    return 0    # EXIT_SUCCESS

if __name__ == "__main__":
    estado = main()
    sys.exit(estado)
